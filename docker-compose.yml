version: "3"

volumes:
    prometheus_data: {}
    grafana_data: {}
    build_folder: null

services:
  db:
    image: mysql:8.0
    container_name: db
    ports:
      - 3306:3306 # HOST:CONTAINER
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: "mysql-db"
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./backend/mysql-db:/var/lib/mysql #이거?

  backend:
    container_name: backend
    build:
      context: ./backend

      args:
        DJANGO_ALLOWED_HOSTS: "*"
        DJANGO_SECRET_KEY: "*"
        DJANGO_CORS_ORIGIN_WHITELIST: "*"
    # command: >
    #   sh -c "python wait_for_mysql.py &&
    #           python manage.py makemigrations hey_apple_app &&
    #           python manage.py migrate hey_apple_app &&
    #           python hey_apple_app/elastic.py &&
    #           gunicorn backend.wsgi:application --bind 0.0.0.0:8000"

    command: >
      sh -c "python wait_for_mysql.py &&
              python manage.py makemigrations hey_apple_app &&
              python manage.py migrate hey_apple_app &&
              python hey_apple_app/elastic.py &&
              python manage.py runserver 0.0.0.0:8000"
    # 나중에 배포 시 /etc/systemd/system/gunicorn.service 파일 생성
    ports:
      - 8000:8000
    volumes:
      - ./backend/:/backend/
    expose:
      - 8000
    depends_on:
      - db

  redis:
    image: redis:latest
    command: redis-server --port 6379
    container_name: "redis_server"
    environment:
      - REDIS_PASSWORD=1234
      - REDIS_HOST=redis
    labels:
      - "name=redis"
      - "mode=standalone"
    volumes:
      - ./backend/redis:/redis
    ports:
      - 6379:6379

  crawling:
    build: ./crawling
    shm_size: 2gb
    user: root

    command: >
      sh -c "python3 fruits_crawling.py &&
              python3 pymongo_tut.py"
    # command: >
    #   sh -c "python3 pymongo_tut.py"

    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
    tty: true

  nginx:
    container_name: nginx
    build:
      context: "./nginx"
    ports:
      - 80:80 # [호스트 포트]:[컨테이너 포트]
    volumes:
      - build_folder:/var/www/frontend
    depends_on:
      - backend
      - frontend

  celery_worker:
    container_name: celery_worker
    build:
      context: ./backend
    volumes:
      - ./backend:/backend
    ports: []
    depends_on:
      - rabbitmq
      - backend
    environment:
      - C_FORCE_ROOT=true
    command: sh -c "celery -A backend worker --loglevel=info"

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin
    ports:
      - "5672:5672" # Default Port
      - "15672:15672" # UI Port
    expose:
      - "15672"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./monitor/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    expose:
      - 9100
    ports:
      - 9100:9100
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /etc/machine-id:/etc/machine-id:ro
    privileged: true
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: root
    restart: unless-stopped
    links:
      - prometheus:prometheus
    ports:
      - 3000:3000
    volumes:
      - ./monitor/data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=myadmin
      - GF_USERS_ALLOW_SIGN_UP=false
  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitor/alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  elasticsearch:
    container_name: elasticsearch
    build:
      context: elasticsearch/
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      # - ./elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx512m -Xms512m" # 자바 메모리
      ELASTIC_PASSWORD: heyapple123
    healthcheck:
      test: curl --silent http://elasticsearch:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    container_name: kibana
    build:
      context: kibana/
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,z
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - rabbitmq
      - backend
  frontend:
    build:
      context: ./frontend/hey-apple
    volumes:
      - ./frontend/hey-apple/:/frontend
      - build_folder:/frontend/build
      - ./frontend/node_modules/:/frontend/node_modules
    tty: true
